{"version":3,"sources":["Navbar.js","Home.js","About.js","Projects.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","react_router_dom","exact","activeClassName","to","React","Component","Home","About","Projects","Routes","react_router","path","component","App","Navbar_Navbar","Routes_Routes","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAIqBA,0LAEnB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACdH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,OAAK,EAACC,gBAAgB,aAAaC,GAAG,KAA/C,QAGAP,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,OAAK,EAACC,gBAAgB,aAAaC,GAAG,aAA/C,YAGAP,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,OAAK,EAACC,gBAAgB,aAAaC,GAAG,UAA/C,iBAVgCC,IAAMC,oBCFrBC,mLAEnB,OAAOV,EAAAC,EAAAC,cAAA,8BAFyBM,IAAMC,WCAnBE,mLAEnB,OAAOX,EAAAC,EAAAC,cAAA,+BAF0BM,IAAMC,WCApBG,mLAEnB,OAAOZ,EAAAC,EAAAC,cAAA,kCAF6BM,IAAMC,WCIvBI,mLAEnB,OACCb,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOT,OAAK,EAACU,KAAK,IAAIC,UAAWN,IACjCV,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOT,OAAK,EAACU,KAAK,SAASC,UAAWL,IACtCX,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOT,OAAK,EAACU,KAAK,YAAYC,UAAWJ,YANTJ,IAAMC,WCc3BQ,MAff,WACC,OACCjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACdH,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACiB,EAAD,WCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACR1B,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACCJ,EAAAC,EAAAC,cAACyB,EAAD,OAEDC,SAASC,eAAe,SDsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.95169989.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Navbar.css';\n\nexport default class Navbar extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"Navbar\">\n\t\t\t\t<NavLink exact activeClassName=\"active-nav\" to=\"/\">\n\t\t\t\t\tHome\n\t\t\t\t</NavLink>\n\t\t\t\t<NavLink exact activeClassName=\"active-nav\" to=\"/projects\">\n\t\t\t\t\tProjects\n\t\t\t\t</NavLink>\n\t\t\t\t<NavLink exact activeClassName=\"active-nav\" to=\"/about\">\n\t\t\t\t\tAbout\n\t\t\t\t</NavLink>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\n\nexport default class Home extends React.Component {\n\trender() {\n\t\treturn <h1>Home Page</h1>;\n\t}\n}\n","import React from 'react';\n\nexport default class About extends React.Component {\n\trender() {\n\t\treturn <h1>About Page</h1>;\n\t}\n}\n","import React from 'react';\n\nexport default class Projects extends React.Component {\n\trender() {\n\t\treturn <h1>Projects Page</h1>;\n\t}\n}\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport Home from './Home';\nimport About from './About';\nimport Projects from './Projects';\n\nexport default class Routes extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t\t<Route exact path=\"/about\" component={About} />\n\t\t\t\t<Route exact path=\"/projects\" component={Projects} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './App.css';\nimport Navbar from './Navbar';\nimport Routes from './Routes';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"page-body\">\n\t\t\t\t<Navbar />\n\t\t\t\t<div className=\"content-container\">\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Routes />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter as Router } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<Router>\n\t\t<App />\n\t</Router>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}